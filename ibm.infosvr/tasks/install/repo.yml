---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

##########
# SETUP
- name: repo - install repository-specific packages
  yum:
    state: present
    name:
      - libaio
  when: (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))
  retries: 3
  delay: 5
  register: __ibm_infosvr_repo_yum
  until: __ibm_infosvr_repo_yum is succeeded

- name: repo - create required groups
  group: name={{ item }}
  with_items:
    - "{{ ibm_infosvr_group_db2_instance }}"
    - "{{ ibm_infosvr_group_db2_fenced }}"
    - "{{ ibm_infosvr_user_xmeta }}"
    - "{{ ibm_infosvr_user_odb }}"
    - "{{ ibm_infosvr_user_staging }}"
    - "{{ ibm_infosvr_user_ia }}"
    - "{{ ibm_infosvr_user_srd }}"
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: repo - create required users
  user: name={{ item.user }} group={{ item.group }} password={{ item.password }} shell=/bin/bash
  with_items:
    - group: "{{ ibm_infosvr_group_db2_instance }}"
      user: "{{ ibm_infosvr_user_db2_instance }}"
      password: "{{ ibm_infosvr_upwd_db2_instance |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_group_db2_fenced }}"
      user: "{{ ibm_infosvr_user_db2_fenced }}"
      password: "{{ ibm_infosvr_upwd_db2_fenced |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_user_xmeta }}"
      user: "{{ ibm_infosvr_user_xmeta }}"
      password: "{{ ibm_infosvr_upwd_xmeta |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_user_odb }}"
      user: "{{ ibm_infosvr_user_odb }}"
      password: "{{ ibm_infosvr_upwd_odb |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_user_staging }}"
      user: "{{ ibm_infosvr_user_staging }}"
      password: "{{ ibm_infosvr_upwd_staging |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_user_ia }}"
      user: "{{ ibm_infosvr_user_ia }}"
      password: "{{ ibm_infosvr_upwd_ia |password_hash('sha512', ibm_infosvr_salt) }}"
    - group: "{{ ibm_infosvr_user_srd }}"
      user: "{{ ibm_infosvr_user_srd }}"
      password: "{{ ibm_infosvr_upwd_srd |password_hash('sha512', ibm_infosvr_salt) }}"
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))
  loop_control:
    label: "{{ item.user }} - {{ item.group }}"

- name: repo - parse external-db-specific variables
  include_vars: file=existing-db-v{{ __ibm_infosvr_version|replace(".", "") }}.yml

- name: repo - configure XMETA database creation scripts
  replace:
    dest: "{{ item[0].src }}/{{ item[0].file }}"
    regexp: "{{ item[1].match }}"
    replace: "{{ item[1].value }}"
    backup: no
  when: >
        __ibm_infosvr_use_external_db
        and (item[0].file == 'create_xmeta_db.sql' or item[0].file == 'createUserPref.sql')
        and ('ibm_information_server_repo' in group_names)
  with_nested:
    - "{{ __ibm_infosvr_external_db_scripts }}"
    - [ { match: '@DATABASE_NAME@', value: 'xmeta' },
        { match: '@INSTALL_ROOT@', value: '{{ ibm_infosvr_repository_location }}/xmeta' },
        { match: '@DATABASE_ALIAS@', value: 'xmeta' },
        { match: '@DATABASE_USERNAME@', value: '{{ ibm_infosvr_user_xmeta }}' } ]

- name: repo - configure XMETA database grant script
  replace:
    dest: "{{ item[0].src }}/{{ item[0].file }}"
    regexp: "{{ item[1].match }}"
    replace: "{{ item[1].value }}"
    backup: no
  when: >
        __ibm_infosvr_use_external_db
        and (item[0].file == 'db2_grant_Permissions.sql')
        and ('ibm_information_server_repo' in group_names)
  with_nested:
    - "{{ __ibm_infosvr_external_db_scripts }}"
    - [ { match: '@DATABASE_NAME@', value: 'xmeta' },
        { match: '@DATABASE_USERNAME@', value: '{{ ibm_infosvr_user_staging }}' } ]

- name: repo - fix DFD settings script (v11.7+)
  replace:
    dest: "{{ item[0].src }}/{{ item[0].file }}"
    regexp: "{{ item[1].match }}"
    replace: "{{ item[1].value }}"
    backup: no
  when: >
        __ibm_infosvr_use_external_db
        and (item[0].file == 'createUserPref.sql')
        and ('ibm_information_server_repo' in group_names)
        and (__ibm_infosvr_version == "11.7")
  with_nested:
    - "{{ __ibm_infosvr_external_db_scripts }}"
    - [ { match: '^CONNECT RESET;$', value: "" } ]

- name: repo - configure IADB database creation scripts
  replace:
    dest: "{{ item[0].src }}/{{ item[0].file }}"
    regexp: "{{ item[1].match }}"
    replace: "{{ item[1].value }}"
    backup: no
  when: >
        __ibm_infosvr_use_external_db
        and (item[0].file == 'create_ia_db.sql' or item[0].file == 'create_ia_db_sp.sql')
        and ('ibm_information_server_repo' in group_names)
        and __ibm_infosvr_features.ia
  with_nested:
    - "{{ __ibm_infosvr_external_db_scripts }}"
    - [ { match: '@DATABASE_NAME@', value: 'iadb' },
        { match: '@INSTALL_ROOT@', value: '{{ ibm_infosvr_repository_location }}/iadb' },
        { match: '@DATABASE_ALIAS@', value: 'iadb' },
        { match: '@DATABASE_USERNAME@', value: '{{ ibm_infosvr_user_ia }}' } ]

- name: repo - retrieve database setup scripts from installer
  fetch:
    src: "{{ item.src }}/{{ item.file }}"
    dest: cache/{{ item.file }}
    flat: yes
  with_items: "{{ __ibm_infosvr_external_db_scripts }}"
  when: __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names)

- import_tasks: existing-db.yml
  when: __ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names)

- name: repo - apply response file template
  template:
    src: repo-v{{ __ibm_infosvr_version|replace(".", "") }}.j2
    dest: "{{ ibm_infosvr_tmp.linux }}/is-suite/repo.rsp"
    owner: root
    group: root
    mode: 0644
  when: >
        (ibm_infosvr_version_xml.find('repository="true"') == -1)
        and ('ibm_information_server_repo' in group_names)

- name: repo - parse repository-specific variables
  include_vars: file=repo.yml

- import_tasks: kernel-and-firewall.yml
  when: (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

##########
# BASE INSTALLATION
- name: repo - install repository tier silently
  shell: >
          umask 022 &&
          {{ ibm_infosvr_tmp.linux }}/is-suite/setup
          -rsp {{ ibm_infosvr_tmp.linux }}/is-suite/repo.rsp
          {% if ibm_infosvr_force.repo is defined and ibm_infosvr_force.repo %}-force{% endif %}
  args:
    executable: /bin/bash
    creates: "{{ ibm_infosvr_install_location.linux }}/Version.xml"
  register: __ibm_infosvr_repo_install
  when: >
        (ibm_infosvr_version_xml.find('repository="true"') == -1)
        and ('ibm_information_server_repo' in group_names)

- import_tasks: db2client.yml
  when: (__ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: repo - confirm repository tier is fully started
  wait_for: port={{ ibm_infosvr_ports.db2 }} host={{ __ibm_infosvr_db_host }} state=started delay=10 timeout=300

# Next two tasks for RHEL 7 and v11.5 only (http://www-01.ibm.com/support/docview.wss?uid=swg21964393)
- name: repo - configure systemd restartability
  template:
    src: db2fmcd.service.j2
    dest: /etc/systemd/system/db2fmcd.service
    owner: root
    group: root
    mode: "0644"
  when: >
        (ansible_distribution == "RedHat" or ansible_distribution == "CentOS")
        and (ansible_distribution_major_version == "7")
        and (__ibm_infosvr_version == "11.5")
        and (not 'ibm_information_server_external_db' in group_names)

- name: repo - register DB2 in systemd
  systemd: name=db2fmcd enabled=yes state=started daemon_reload=yes
  when: >
        (ansible_distribution == "RedHat" or ansible_distribution == "CentOS")
        and (ansible_distribution_major_version == "7")
        and (__ibm_infosvr_version == "11.5")
        and (not 'ibm_information_server_external_db' in group_names)

- name: repo - restart repository tier
  reboot:
    msg: "Restarting to ensure restartability works"
    test_command: "ss -tln | grep ':{{ ibm_infosvr_ports.db2 }} '"
  when: >
    ('ibm_information_server_repo' in group_names)
    and __ibm_infosvr_repo_install is changed
    and (not ibm_infosvr_container)
