---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- import_tasks: refresh_install_details.yml

- name: container check
  stat:
    path: /.dockerenv
  when: ('ibm_information_server_clients' not in group_names)
  register: __ibm_infosvr_container

- name: set container status
  set_fact:
    ibm_infosvr_container: "{{ __ibm_infosvr_container.stat.exists }}"
  when: ('ibm_information_server_clients' not in group_names)

- name: setup variables for subsequent role use
  set_fact:
    ibm_infosvr_hosts:
      domain: |-
        {% if groups['ibm_information_server_domain'] is defined
        and (groups['ibm_information_server_domain']|length > 0) -%}
        {{ groups['ibm_information_server_domain'][0] }}
        {%- else -%}
        {%- endif %}
      repo: |-
        {% if groups['ibm_information_server_repo'] is defined
        and (groups['ibm_information_server_repo']|length > 0) -%}
        {{ groups['ibm_information_server_repo'][0] }}
        {%- else -%}
        {%- endif %}
      engine: |-
        {% if groups['ibm_information_server_engine'] is defined
        and (groups['ibm_information_server_engine']|length > 0) -%}
        {{ groups['ibm_information_server_engine'][0] }}
        {%- else -%}
        {%- endif %}
      client: |-
        {% if groups['ibm_information_server_clients'] is defined
        and (groups['ibm_information_server_clients']|length > 0) -%}
        {{ groups['ibm_information_server_clients'][0] }}
        {%- else -%}
        {%- endif %}
      ug: |-
        {% if groups['ibm_information_server_ug'] is defined
        and (groups['ibm_information_server_ug']|length > 0) -%}
        {{ groups['ibm_information_server_ug'][0] }}
        {%- else -%}
        {%- endif %}
      cognos: |-
        {% if groups['ibm_cognos_report_server'] is defined
        and (groups['ibm_cognos_report_server']|length > 0) -%}
        {{ groups['ibm_cognos_report_server'][0] }}
        {%- else -%}
        {%- endif %}
      bpm: |-
        {% if groups['ibm_bpm'] is defined and (groups['ibm_bpm']|length > 0) -%}
        {{ groups['ibm_bpm'][0] }}
        {%- else -%}
        {%- endif %}
      exdb: |-
        {% if groups['ibm_information_server_external_db'] is defined
        and (groups['ibm_information_server_external_db']|length > 0) -%}
        {{ groups['ibm_information_server_external_db'][0] }}
        {%- else -%}
        {%- endif %}
    ibm_infosvr_users:
      isadmin: "{{ ibm_infosvr_user_isadmin }}"
      dsadm: "{{ ibm_infosvr_user_dsadmin }}"
      db2inst1: "{{ ibm_infosvr_user_db2_instance }}"
      xmeta: "{{ ibm_infosvr_user_xmeta }}"
    ibm_infosvr_groups:
      dsadm: "{{ ibm_infosvr_group_dsadmin }}"
      db2iadm1: "{{ ibm_infosvr_group_db2_instance }}"
    ibm_infosvr_upwds:
      isadmin: "{{ ibm_infosvr_upwd_isadmin }}"
      db2inst1: "{{ ibm_infosvr_upwd_db2_instance }}"
      xmeta: "{{ ibm_infosvr_upwd_xmeta }}"
    ibm_infosvr_locations:
      linux: "{{ ibm_infosvr_install_location.linux }}"
      win: "{{ ibm_infosvr_install_location.win }}"
      db2: "{{ ibm_infosvr_install_location.db2 }}"
      was: "{{ ibm_infosvr_install_location.was }}"
    ibm_infosvr_ports_ext:
      console: "{{ ibm_infosvr_ports.console }}"
      db2: "{{ ibm_infosvr_ports.db2 }}"
      zookeeper: "{{ ibm_infosvr_ports.zookeeper }}"
      solr: "{{ ibm_infosvr_ports.solr }}"
      kafka: "{{ ibm_infosvr_ports.kafka }}"

- name: setup external db variable
  set_fact:
    __ibm_infosvr_use_external_db: "{{ ibm_infosvr_hosts.exdb | length > 0 }}"

- name: set database host
  set_fact:
    __ibm_infosvr_db_host: |-
      {% if __ibm_infosvr_use_external_db -%}
      {{ ibm_infosvr_hosts.exdb }}
      {%- else -%}
      {{ ibm_infosvr_hosts.repo }}
      {%- endif %}
  when: ('ibm_information_server_clients' not in group_names)

- name: setup unified governance external service IPs
  set_fact:
    __ibm_infosvr_k8s_externals:
      domain: "{{ hostvars[ibm_infosvr_hosts.domain].ansible_fqdn }}"
      repo: "{{ hostvars[__ibm_infosvr_db_host].ansible_fqdn }}"
  when: ('ibm_information_server_clients' not in group_names)

- name: default any missing features to disabled
  set_fact:
    __ibm_infosvr_features:
      opsdb: |-
        {% if ibm_infosvr_features.opsdb is defined -%}
        {{ ibm_infosvr_features.opsdb }}
        {%- else -%}
        False
        {%- endif %}
      ia: |-
        {% if ibm_infosvr_features.ia is defined -%}
        {{ ibm_infosvr_features.ia }}
        {%- else -%}
        False
        {%- endif %}
      igc: |-
        {% if ibm_infosvr_features.igc is defined -%}
        {{ ibm_infosvr_features.igc }}
        {%- else -%}
        False
        {%- endif %}
      dataclick: |-
        {% if ibm_infosvr_features.dataclick is defined -%}
        {{ ibm_infosvr_features.dataclick }}
        {%- else -%}
        False
        {%- endif %}
      masking: |-
        {% if ibm_infosvr_features.masking is defined -%}
        {{ ibm_infosvr_features.masking }}
        {%- else -%}
        False
        {%- endif %}
      event_mgmt: |-
        {% if ibm_infosvr_features.event_mgmt is defined -%}
        {{ ibm_infosvr_features.event_mgmt }}
        {%- else -%}
        False
        {%- endif %}
      qs: |-
        {% if ibm_infosvr_features.qs is defined -%}
        {{ ibm_infosvr_features.qs }}
        {%- else -%}
        False
        {%- endif %}
      wisd: |-
        {% if ibm_infosvr_features.wisd is defined -%}
        {{ ibm_infosvr_features.wisd }}
        {%- else -%}
        False
        {%- endif %}
      fasttrack: |-
        {% if ibm_infosvr_features.fasttrack is defined -%}
        {{ ibm_infosvr_features.fasttrack }}
        {%- else -%}
        False
        {%- endif %}
      dqec: |-
        {% if ibm_infosvr_features.dqec is defined -%}
        {{ ibm_infosvr_features.dqec }}
        {%- else -%}
        False
        {%- endif %}
      ml_term_assignment: |-
        {% if ibm_infosvr_features.ml_term_assignment is defined -%}
        {{ ibm_infosvr_features.ml_term_assignment }}
        {%- else -%}
        False
        {%- endif %}
      igd: |-
        {% if ibm_infosvr_features.igd is defined -%}
        {{ ibm_infosvr_features.igd }}
        {%- else -%}
        False
        {%- endif %}
      wlp: |-
        {% if ibm_infosvr_features.wlp is defined -%}
        {{ ibm_infosvr_features.wlp }}
        {%- else -%}
        False
        {%- endif %}
      ises: |-
        {% if ibm_infosvr_features.ises is defined -%}
        {{ ibm_infosvr_features.ises }}
        {%- else -%}
        False
        {%- endif %}
      omag: |-
        {% if ibm_infosvr_features.omag is defined -%}
        {{ ibm_infosvr_features.omag }}
        {%- else -%}
        False
        {%- endif %}
      wkc: |-
        {% if ibm_infosvr_features.wkc is defined -%}
        {{ ibm_infosvr_features.wkc }}
        {%- else -%}
        False
        {%- endif %}
      wkc_pro: |-
        {% if ibm_infosvr_features.wkc_pro is defined -%}
        {{ ibm_infosvr_features.wkc_pro }}
        {%- else -%}
        False
        {%- endif %}

- name: check if UG (ISES) is installed
  shell: >
    kubectl get pods --no-headers=true
    | awk '{ print $1 }'
    > /tmp/ug_podlist.log
  ignore_errors: True
  changed_when: False
  become: yes
  when: ('ibm_information_server_ug' in group_names)

- name: fetch UG installation status
  fetch:
    src: /tmp/ug_podlist.log
    dest: cache/ug_podlist.log
    flat: yes
  become: yes
  when: ('ibm_information_server_ug' in group_names)

- name: get OMAG configuration files
  find:
    paths: "{{ ibm_infosvr_install_location.ises }}/OMAG"
    patterns:
      - '*.config'
      - '*.registrystore'
    file_type: file
  become: yes
  when: ('ibm_information_server_ug' in group_names)
  register: __ibm_infosvr_omag_config

- name: set UG installation status fact
  set_fact:
    __ibm_infosvr_ug_pods_list: "{{ lookup('file', 'cache/ug_podlist.log', errors='ignore') }}"

- name: get OMAG pod name
  shell: >
    kubectl get pods --no-headers=true
    | awk '{ print $1 }'
    | grep 'omag'
  ignore_errors: True
  changed_when: False
  become: yes
  register: __ibm_infosvr_ug_omag_pod
  when: ('ibm_information_server_ug' in group_names)
