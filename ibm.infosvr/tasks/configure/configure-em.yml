---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: configure-em - check for event management
  command: >
          {{ ibm_infosvr_install_location.linux }}/Clients/istools/cli/istool.sh
          event listEventProviders
          -dom {{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports.console }}
          -u {{ ibm_infosvr_user_isadmin }}
          -p {{ ibm_infosvr_upwd_isadmin }}
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  when: ('ibm_information_server_engine' in group_names)
  register: __ibm_infosvr_em_status
  changed_when: False

- name: configure-em - enable event management
  shell: >
          set -o pipefail &&
          source `cat /.dshome`/dsenv &&
          `echo $'\n'` | ./event_management_setup.sh
          {{ ibm_infosvr_user_isadmin }}
          {{ ibm_infosvr_upwd_isadmin }}
          {{ ibm_infosvr_hosts.domain }}:{{ ibm_infosvr_ports.console }}
          {{ ibm_infosvr_user_bpm }}
          {{ ibm_infosvr_upwd_bpm }}
          {{ ibm_infosvr_hosts.bpm }}:{{ ibm_infosvr_ports.bpm }}
  args:
    executable: /bin/bash
    chdir: "{{ ibm_infosvr_install_location.linux }}/Clients/DQ_BPM/scripts"
  become_user: "{{ ibm_infosvr_user_dsadmin }}"
  become: yes
  when: >
      ('ibm_information_server_engine' in group_names)
      and
      __ibm_infosvr_em_status.stdout.find("generated by exception set providers (e.g. Information Analyzer)") == -1

- name: configure-em - restrict access to esdb_repository.properties
  file:
    path: "{{ ibm_infosvr_install_location.linux }}/Server/ESDB/esdb_repository.properties"
    mode: "0600"
  when: ('ibm_information_server_engine' in group_names)

- name: configure-em - configure esdb_repository.properties
  replace:
    dest: "{{ ibm_infosvr_install_location.linux }}/Server/ESDB/esdb_repository.properties"
    regexp: "{{ item.match }}"
    replace: "{{ item.value }}"
    backup: no
  with_items:
    - match: '(^DatabasePlatform.databaseType)=.*'
      value: '\1=DB2'
    - match: '(^DatabasePlatform.version)=.*'
      value: '\1={% if __ibm_infosvr_version == "11.5" %}10.5{% else %}11.1{% endif %}'
    - match: '(^DatabaseServer.host)=.*'
      value: '\1={{ hostvars[__ibm_infosvr_db_host].ansible_fqdn }}'
    - match: '(^DatabaseServer.port)=.*'
      value: '\1={{ ibm_infosvr_ports.db2 }}'
    - match: '(^Database.name)=.*'
      value: '\1=ESDBDB2'
    - match: '(^Database.alias)=.*'
      value: '\1='
    - match: '(^Database.location)=.*'
      value: '\1={{ ibm_infosvr_repository_location }}/esdb'
    - match: '(^Repository.schema)=.*'
      value: '\1={{ ibm_infosvr_user_esdb }}'
    - match: '(^RepositoryConnection.userName)=.*'
      value: '\1={{ ibm_infosvr_user_esdb }}'
    - match: '(^RepositoryConnection.password)=.*'
      value: '\1={{ ibm_infosvr_upwd_esdb }}'
    - match: '(^RepositoryConnection.managedDataSourceName)=.*'
      value: '\1=ESDB'
    - match: '(^RepositoryConnection.properties)=.*'
      value: '\1='
  when: ('ibm_information_server_engine' in group_names)
  loop_control:
    label: "{{ item.match }}"

- name: configure-em - fetch esdb_repository.properties
  fetch:
    src: "{{ ibm_infosvr_install_location.linux }}/Server/ESDB/esdb_repository.properties"
    dest: cache/esdb_repository.properties
    flat: yes
  when: ('ibm_information_server_engine' in group_names)

- name: configure-em - deploy esdb_repository.properties
  copy:
    src: cache/esdb_repository.properties
    dest: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin/esdb_repository.properties"
    mode: "0600"
    force: no
  when: ('ibm_information_server_domain' in group_names)

- name: configure-em - check esdb repository registration
  command: >
          ./RepositoryAdmin.sh -dr -rn ESDB
  args:
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  when: ('ibm_information_server_domain' in group_names)
  register: __ibm_infosvr_em_esdb_registered
  ignore_errors: yes
  changed_when: False

- name: configure-em - register the esdb repository
  command: >
          ./RepositoryAdmin.sh -rr -pf esdb_repository.properties
  args:
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
  when: >
        ('ibm_information_server_domain' in group_names)
        and ((__ibm_infosvr_em_esdb_registered.stdout.find(hostvars[__ibm_infosvr_db_host].ansible_fqdn|lower) == -1)
        and (__ibm_infosvr_em_esdb_registered.stdout.find('localhost') == -1))

- name: configure-em - create location for database scripts
  file: path=/tmp/esdb state=directory
  when: ('ibm_information_server_domain' in group_names)

- name: configure-em - generate scripts for exceptions database
  command: >
          ./RepositoryAdmin.sh -sss -rn ESDB -sl /tmp/esdb
  args:
    chdir: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin"
    creates: /tmp/esdb/esdb_table_creation.sql
  when: ('ibm_information_server_domain' in group_names)

- name: configure-em - cache database generation scripts
  fetch: src=/tmp/esdb/{{ item }} dest=cache/esdb/ flat=yes
  with_items:
    - "esdb_table_creation.sql"
    - "esdb_tablespace_creation.sql"
    - "esdb_db_creation.sql"
    - "esdb_remove_schema_tablespace.sql"
    - "esdb_permissions_schema_creation.sql"
  when: ('ibm_information_server_domain' in group_names)

- name: configure-em - create esdb user
  user:
    name: "{{ ibm_infosvr_user_esdb }}"
    group: "{{ ibm_infosvr_group_db2_instance }}"
    password: "{{ ibm_infosvr_upwd_esdb |password_hash('sha512', ibm_infosvr_salt) }}"
    shell: /bin/bash
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-em - create esdb repository location
  file:
    path: "{{ ibm_infosvr_repository_location }}/esdb"
    state: directory
    mode: 0755
    owner: "{{ ibm_infosvr_user_db2_instance }}"
    group: root
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-em - create location for database scripts
  file: path=/home/{{ ibm_infosvr_user_db2_instance }}/esdb state=directory
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-em - copy database generation scripts
  copy: src=cache/esdb/{{ item }} dest=/home/{{ ibm_infosvr_user_db2_instance }}/esdb/{{ item }}
  with_items:
    - "esdb_table_creation.sql"
    - "esdb_tablespace_creation.sql"
    - "esdb_db_creation.sql"
    - "esdb_remove_schema_tablespace.sql"
    - "esdb_permissions_schema_creation.sql"
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-em - check exception database catalog status
  shell: >
          source ~/.bashrc &&
          db2 list database directory
  args:
    executable: /bin/bash
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  ignore_errors: yes
  register: __ibm_infosvr_em_db2catalog
  changed_when: False

- name: configure-em - create esdb database
  shell: >
          source ~/.bashrc &&
          {{ item }}
  args:
    executable: /bin/bash
  with_items:
    - "db2 -tf /home/{{ ibm_infosvr_user_db2_instance }}/esdb/esdb_db_creation.sql"
    - "db2 -tf /home/{{ ibm_infosvr_user_db2_instance }}/esdb/esdb_tablespace_creation.sql"
    - "db2 -tf /home/{{ ibm_infosvr_user_db2_instance }}/esdb/esdb_permissions_schema_creation.sql"
    - "db2 connect to ESDBDB2 user {{ ibm_infosvr_user_esdb }} using {{ ibm_infosvr_upwd_esdb }} && \
        db2 -tf /home/{{ ibm_infosvr_user_db2_instance }}/esdb/esdb_table_creation.sql"
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        ((__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names)))
        and (__ibm_infosvr_em_db2catalog.stdout.find('ESDBDB2') == -1)
  register: __ibm_infosvr_em_db_creation
  failed_when: __ibm_infosvr_em_db_creation.rc == 8

- name: configure-em - generate exceptions database connection file
  command: >
          ../../ASBNode/bin/RegistrationCommand.sh
          -user {{ ibm_infosvr_user_isadmin }}
          -password {{ ibm_infosvr_upwd_isadmin }}
          -gcf
          -rp ESDB
          -cf ESDBConnect.tmpl
          -res ESDBConnect.cfg
  args:
    chdir: "{{ ibm_infosvr_install_location.linux }}/Server/ESDB"
    creates: "{{ ibm_infosvr_install_location.linux }}/Server/ESDB/ESDBConnect.cfg"
  when: ('ibm_information_server_engine' in group_names)

- name: configure-em - add ODBC entry for exceptions database
  import_role: name=IBM.infosvr-metadata-asset-manager
  vars:
    odbc_entries:
      - name: ESDB
        type: db2
        database: ESDBDB2
        host: "{{ hostvars[__ibm_infosvr_db_host].ansible_fqdn }}"
        port: "{{ ibm_infosvr_ports.db2 }}"
  when: ('ibm_information_server_engine' in group_names)
