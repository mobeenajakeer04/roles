---
###
# Copyright 2018 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- name: configure-igd - update IGD configuration table settings
  lineinfile:
    dest: "{{ ibm_infosvr_install_location.linux }}\
          /Clients/InformationGovernanceDashboard/setup/configuration/PopulateIGDConfigTables.sql"
    regexp: '{{ item.find }}'
    line: '{{ item.replace }}'
  with_items:
    - find: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES \\('IGC_URL'"
      replace: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES ('IGC_URL',\
                'https://{{ hostvars[inventory_hostname].ansible_fqdn }}:{{ ibm_infosvr_ports.console }}\
                /ibm/iis/igc/');"
    - find: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES \\('SMC_URL'"
      replace: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES ('SMC_URL',\
                'https://{{ hostvars[inventory_hostname].ansible_fqdn }}:{{ ibm_infosvr_ports.console }}\
                /ibm/iis/events');"
    - find: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES \\('DQEC_URL'"
      replace: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES ('DQEC_URL',\
                'https://{{ hostvars[inventory_hostname].ansible_fqdn }}:{{ ibm_infosvr_ports.console }}\
                /ibm/iis/dqec');"
    - find: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES \\('STC_URL'"
      replace: "INSERT INTO IGDCONFG.SETUP_PARAMETER VALUES ('STC_URL',\
                'https://{{ ibm_infosvr_hosts.bpm }}:{{ ibm_infosvr_ports.bpm }}/ProcessPortal');"
  when: ('ibm_information_server_domain' in group_names)

- name: configure-igd - grab IGD package
  fetch:
    src: "{{ ibm_infosvr_install_location.linux }}/Clients/\
          InformationGovernanceDashboard/report_deployment_package/IGD_Deployment_Archive.zip"
    dest: cache/
    flat: yes
  when: ('ibm_information_server_domain' in group_names)

- name: configure-igd - grab IGD scripts
  fetch:
    src: "{{ ibm_infosvr_install_location.linux }}/Clients/\
          InformationGovernanceDashboard/setup/configuration/{{ item }}"
    dest: cache/
    flat: yes
  with_items:
    - "PopulateIGDConfigTables.sql"
    - "CreateIGDConfigTables_DB2.sql"
  when: ('ibm_information_server_domain' in group_names)

# Unfortunately Ansible doesn't yet support a recursive fetch...
- name: configure-igd - grab IGD images
  fetch:
    src: "{{ ibm_infosvr_install_location.linux }}/Clients/\
          InformationGovernanceDashboard/setup/IGD_images/{{ item }}"
    dest: cache/IGD_images/{{ item }}
    flat: yes
  with_items:
    - checkmark.gif
    - Green.gif
    - high_priority.png
    - ibm-logo-white.gif
    - ignored.png
    - low_priority.png
    - medium_priority.png
    - Red.gif
    - treeExpand_minus.gif
    - treeExpand_plus.gif
    - Yellow.gif
  when: ('ibm_information_server_domain' in group_names)

- name: configure-igd - link the launchpad directly to IGD report
  command: "{{ ibm_infosvr_install_location.linux }}/ASBServer/bin/iisAdmin.sh \
            -set \
            -key 'com.ibm.iis.launchpad.application.IGC.url' \
            -value 'http://{{ hostvars[ibm_infosvr_hosts.cognos].ansible_fqdn|lower }}:80\
            /ibmcognos/cgi-bin/cognos.cgi?b_action=xts.run&m=portal/main.xts&m_redirect_windowmode=2\
            &m_redirect=%2fibmcognos%2fcgi-bin%2fcognos.cgi%3fb_action%3dxts.run%26m%3dportal%2f\
            launch.xts%26ui.gateway%3d%252fibmcognos%252fcgi-bin%252fcognos.cgi%26ui.tool%3d\
            DashboardConsole%26ui.action%3dedit%26ui.atompath%3dPublic%252520Folders%252f\
            Information%252520Governance%252520Dashboard%252fInformation%252520Governance%252f\
            Workspaces%252fInformation%252520Governance%252520Dashboard&m_redirect_uitool=DashboardConsole'"
  when: ('ibm_information_server_domain' in group_names)

- name: configure-igd - create IGD user
  user:
    name: "{{ ibm_infosvr_user_igd }}"
    group: "{{ ibm_infosvr_group_db2_instance }}"
    password: "{{ ibm_infosvr_upwd_igd |password_hash('sha512', ibm_infosvr_salt) }}"
    shell: /bin/bash
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-igd - grant read access to IGD user
  shell: "source ~/.bashrc && {{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "db2 connect to XMETA && db2 'GRANT DATAACCESS on database to user {{ ibm_infosvr_user_igd }}'"
    - "db2 connect to IADB && db2 'GRANT DATAACCESS on database to user {{ ibm_infosvr_user_igd }}'"
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-igd - check existing IGD configuration
  shell: >
          source ~/.bashrc &&
          db2 connect to XMETA &&
          db2 'select schemaname from syscat.schemata'
  args:
    executable: /bin/bash
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))
  register: __ibm_infosvr_igd_schemas
  changed_when: False

- name: configure-igd - create IGD script location
  file:
    path: "{{ ibm_infosvr_install_location.linux }}/Clients/\
          InformationGovernanceDashboard/setup/configuration"
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: >
        (__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names))

- name: configure-igd - copy IGD scripts
  copy:
    src: cache/{{ item }}
    dest: "{{ ibm_infosvr_install_location.linux }}/Clients/\
          InformationGovernanceDashboard/setup/configuration/{{ item }}"
  with_items:
    - PopulateIGDConfigTables.sql
    - CreateIGDConfigTables_DB2.sql
  when: >
        ((__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names)))
        and (__ibm_infosvr_igd_schemas.stdout.find('IGDCONFG') == -1)

- name: configure-igd - create IGD configuration
  shell: "source ~/.bashrc && {{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "db2 connect to XMETA && db2 create schema IGDCONFG"
    - "db2 connect to XMETA && db2 grant ALTERIN, CREATEIN, DROPIN \
        on schema IGDCONFG to user {{ ibm_infosvr_user_xmeta }}"
    - "db2 connect to XMETA user {{ ibm_infosvr_user_xmeta }} \
        using {{ ibm_infosvr_upwd_xmeta }} && \
        db2 -tf {{ ibm_infosvr_install_location.linux }}/Clients/\
        InformationGovernanceDashboard/setup/configuration/CreateIGDConfigTables_DB2.sql"
    - "db2 connect to XMETA user {{ ibm_infosvr_user_xmeta }} \
        using {{ ibm_infosvr_upwd_xmeta }} && \
        db2 -tf {{ ibm_infosvr_install_location.linux }}/Clients/\
        InformationGovernanceDashboard/setup/configuration/PopulateIGDConfigTables.sql"
  become_user: "{{ ibm_infosvr_user_db2_instance }}"
  become: yes
  when: >
        ((__ibm_infosvr_use_external_db and ('ibm_information_server_external_db' in group_names))
        or (not __ibm_infosvr_use_external_db and ('ibm_information_server_repo' in group_names)))
        and (__ibm_infosvr_igd_schemas.stdout.find('IGDCONFG') == -1)

- name: configure-igd - copy IGD package to Cognos
  copy: src=cache/IGD_Deployment_Archive.zip dest={{ cognos_install_location }}/deployment/IGD_Deployment_Archive.zip
  when: ('ibm_cognos_report_server' in group_names)

- name: configure-igd - create IGD image directory
  file: path={{ cognos_install_location }}/webcontent/IGD_images state=directory owner=root group=root mode=0755
  when: ('ibm_cognos_report_server' in group_names)

- name: configure-igd - deploy IGD images to Cognos
  copy: src=cache/IGD_images/ dest={{ cognos_install_location }}/webcontent/IGD_images/
  when: ('ibm_cognos_report_server' in group_names)

#######
# NOTE / TODO:
# There are still manual steps that must be done after all of the above for IGD:
#  - deploying the package
#  - defining datasource connections
#  - linking to IGC from the launchpad
